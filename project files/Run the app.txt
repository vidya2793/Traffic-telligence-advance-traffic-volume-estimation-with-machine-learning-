 Run the app
Create a file called app.py with this code:
python
Copy
Edit
from flask import Flask, request, render_template_string
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score

app = Flask(__name__)

# Sample data
data = {
    'datetime': ['2025-06-26 14:23:45', '2025-06-26 15:45:12', '2025-06-27 08:10:00', '2025-06-27 09:15:30'],
    'traffic_volume': [120, 200, 150, 180]
}

df = pd.DataFrame(data)
df['datetime'] = pd.to_datetime(df['datetime'])
df['year'] = df['datetime'].dt.year
df['month'] = df['datetime'].dt.month
df['day'] = df['datetime'].dt.day
df['hour'] = df['datetime'].dt.hour
df['minute'] = df['datetime'].dt.minute
df['second'] = df['datetime'].dt.second

features = ['year', 'month', 'day', 'hour', 'minute', 'second']
X = df[features]
y = df['traffic_volume']

# Train model on start
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
r2 = r2_score(y_test, y_pred)

# HTML template for rendering
HTML_TEMPLATE = '''
<!DOCTYPE html>
<html lang="en">
<head>
    <title>Traffic Volume Estimation</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background-color: #f0f4f8; }
        h1 { color: #2c3e50; }
        label { display: block; margin-top: 10px; font-weight: bold; }
        input { padding: 5px; margin-top: 5px; width: 100px; }
        button { margin-top: 20px; padding: 10px 20px; background-color: #3498db; color: white; border: none; cursor: pointer; }
        .result { margin-top: 20px; font-size: 1.2em; color: #27ae60; }
        .r2score { margin-top: 10px; font-style: italic; color: #7f8c8d; }
    </style>
</head>
<body>
    <h1>Advanced Traffic Volume Estimation</h1>
    <p>Model R-squared score: {{ r2_score }}</p>

    <form method="POST">
        <label for="year">Year:</label>
        <input type="number" name="year" id="year" value="2025" required />

        <label for="month">Month (1-12):</label>
        <input type="number" name="month" id="month" min="1" max="12" value="6" required />

        <label for="day">Day (1-31):</label>
        <input type="number" name="day" id="day" min="1" max="31" value="26" required />

        <label for="hour">Hour (0-23):</label>
        <input type="number" name="hour" id="hour" min="0" max="23" value="14" required />

        <label for="minute">Minute (0-59):</label>
        <input type="number" name="minute" id="minute" min="0" max="59" value="0" required />

        <label for="second">Second (0-59):</label>
        <input type="number" name="second" id="second" min="0" max="59" value="0" required />

        <button type="submit">Predict Traffic Volume</button>
    </form>

    {% if prediction is not none %}
    <div class="result">
        Estimated Traffic Volume: <strong>{{ prediction }}</strong>
    </div>
    {% endif %}
</body>
</html>
'''

@app.route('/', methods=['GET', 'POST'])
def home():
    prediction = None
    if request.method == 'POST':
        try:
            # Get input values from form
            year = int(request.form['year'])
            month = int(request.form['month'])
            day = int(request.form['day'])
            hour = int(request.form['hour'])
            minute = int(request.form['minute'])
            second = int(request.form['second'])

            # Prepare input for prediction
            input_df = pd.DataFrame({
                'year': [year],
                'month': [month],
                'day': [day],
                'hour': [hour],
                'minute': [minute],
                'second': [second]
            })

            # Predict traffic volume
            pred = model.predict(input_df)[0]
            prediction = f"{pred:.2f}"
        except Exception as e:
            prediction = f"Error: {str(e)}"

    return render_template_string(HTML_TEMPLATE, prediction=prediction, r2_score=f"{r2:.4f}")

if __name__ == '__main__':
    app.run(debug=True, port=5000)